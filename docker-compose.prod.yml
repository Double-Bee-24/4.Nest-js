networks:
  caddy:

services:
  caddy:
    container_name: caddy
    image: caddy:2.9.1-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - $PWD/server/conf:/etc/caddy
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - caddy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"

  swapi_app:
    container_name: swapi_app
    env_file:
      - server/.env
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    ports:
      - "4000:4000"
    networks:
      - caddy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.3"

  frontend:
    container_name: frontend
    env_file:
      - client/.env
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    ports:
      - "4173:4173"
    networks:
      - caddy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"

  postgres_db:
    container_name: postgres_db
    image: postgres:17.4-alpine3.21
    env_file:
      - server/.env
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d starwars_db -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    networks:
      - caddy
    deploy:
      resources:
        limits:
          memory: 128M

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.53.4
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - caddy

  grafana:
    container_name: grafana
    image: grafana/grafana:11.6.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: FH9hy3F9hF9h3190KL
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./docker/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - caddy

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.0
    container_name: postgres_exporter
    env_file:
      - server/.env
    ports:
      - "9187:9187"
    networks:
      - caddy
    depends_on:
      prometheus:
        condition: service_started
      postgres_db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: "0.1"

volumes:
  caddy_data:
  caddy_config:
